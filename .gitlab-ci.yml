#image: golang:1.18

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  DOCKER_REGISTRY: $DOCKER_REGISTRY
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  AWS_REGION: eu-central-1
  AWS_CLUSTER_NAME: $AWS_CLUSTER_NAME
  APP_NAME: locg_service
  NAMESPACE: $NAMESPACE
  VERIFY_CHECKSUM: 'false'
  DOCKER_HOST: $DOCKER_HOST
  DATABASE_NAME: $DATABASE_NAME
  DATABASE_NAME_GAME: $DATABASE_NAME_GAME
  DATABASE_USERNAME: $DATABASE_USERNAME
  DATABASE_PASSWORD: $DATABASE_PASSWORD
  ENVIRONMENT: $CI_COMMIT_BRANCH
  BLOCKCHAIN_MINTER_PRIVATE_KEY: $BLOCKCHAIN_MINTER_PRIVATE_KEY
  PAYPAL_CLIENT_ID: $PAYPAL_CLIENT_ID
  PAYPAL_SECRET: $PAYPAL_SECRET
  OVERRIDE_CONFIG_BRANCH: $OVERRIDE_CONFIG

stages:
  - build
  - deploy

docker-build:
  stage: build
  image:
    name: amazon/aws-cli
    entrypoint: ['']
  services:
    - name: docker:25-dind
      alias: docker
      entrypoint: ['dockerd-entrypoint.sh', '--tls=false']

  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - docker info
    - echo $CI_COMMIT_BRANCH
    - echo $AWS_ACCESS_KEY_ID
    - echo $AWS_SECRET_ACCESS_KEY
    - echo $DOCKER_REGISTRY
    - aws ecr --region eu-central-1 get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build --build-arg CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH} --build-arg CI_COMMIT_SHA=${CI_COMMIT_SHORT_SHA} --build-arg CI_PROJECT_URL=${CI_PROJECT_URL} --build-arg BUILD_NUMBER=${CI_PIPELINE_ID} -t "$DOCKER_REGISTRY:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}" .
    - docker push "$DOCKER_REGISTRY:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
  environment:
    name: $CI_COMMIT_BRANCH
  only:
    - web
    - development
    - staging
    - production
  except:
    - schedules
    - test-feature-branch

deploy-dev:
  stage: deploy
  image: kroniak/ssh-client
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" > env.sh
    - echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> env.sh
    - echo "export DOCKER_REGISTRY=$DOCKER_REGISTRY" >> env.sh
    - echo "export DATABASE_USERNAME=$DATABASE_USERNAME" >> env.sh
    - echo "export DATABASE_PASSWORD=$DATABASE_PASSWORD" >> env.sh
    - echo "export DATABASE_NAME=$DATABASE_NAME" >> env.sh
    - echo "export DATABASE_NAME_GAME=$DATABASE_NAME_GAME" >> env.sh
    - echo "export PAYPAL_CLIENT_ID=$PAYPAL_CLIENT_ID" >> env.sh
    - echo "export PAYPAL_SECRET=$PAYPAL_SECRET" >> env.sh
    - echo "export BLOCKCHAIN_MINTER_PRIVATE_KEY=$BLOCKCHAIN_MINTER_PRIVATE_KEY" >> env.sh
    - echo "export IMAGE_TAG=${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}" >> env.sh
    - echo "export BRANCH=development" >> env.sh
    - ssh ubuntu@$SSH_ADDRESS_DEV -o StrictHostKeyChecking=no "mkdir -p ~/locg"
    - scp -o StrictHostKeyChecking=no env.sh ubuntu@$SSH_ADDRESS_DEV:~/locg/env.sh
    - scp -o StrictHostKeyChecking=no -r deploy/ ubuntu@$SSH_ADDRESS_DEV:~/locg
    - ssh ubuntu@$SSH_ADDRESS_DEV -o StrictHostKeyChecking=no "chmod +x ~/locg/env.sh"
    - ssh ubuntu@$SSH_ADDRESS_DEV -o StrictHostKeyChecking=no "aws ecr --region eu-central-1 get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY"
    - ssh ubuntu@$SSH_ADDRESS_DEV -o StrictHostKeyChecking=no "source ~/locg/env.sh && source ~/locg/deploy/functions.sh && locg_delete_environment development && locg_deploy development ${CI_COMMIT_SHORT_SHA}"
  dependencies: []
  environment:
    name: development
  only:
    - development
  except:
    - schedules

stop_environment:
  stage: deploy
  image: kroniak/ssh-client
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - scp -o StrictHostKeyChecking=no -r deploy/ ubuntu@$SSH_ADDRESS_DEV:~/locg
    - ssh ubuntu@$SSH_ADDRESS_DEV -o StrictHostKeyChecking=no "source ~/locg/deploy/functions.sh && locg_delete_environment ${CI_COMMIT_BRANCH}"
  environment:
    name: $CI_COMMIT_BRANCH
    action: stop
  dependencies: []
  only:
    - web
  except:
    - master
    - tags
    - schedules
  when: manual

docker-deploy-eks:
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: ['']
  services:
    - docker:latest
  before_script:
    - amazon-linux-extras install docker
    - yum install -y tar
    - aws --version
    - docker --version
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin
    - kubectl version --client
    - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $AWS_CLUSTER_NAME
    - aws ecr --region eu-central-1 get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - kubectl set image -n $NAMESPACE  deployment/locg-jobs-service locg-jobs-service=$DOCKER_REGISTRY/jobs-service:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}
    - kubectl set image -n $NAMESPACE  deployment/locg-service locg-service=$DOCKER_REGISTRY:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}
    - kubectl rollout status -w -n $NAMESPACE deployment/locg-service
    - kubectl rollout status -w -n $NAMESPACE deployment/locg-jobs-service

  environment:
    name: $CI_COMMIT_BRANCH
  only:
    - staging
    - production
  except:
    - schedules
