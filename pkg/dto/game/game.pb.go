// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: game.proto

package game

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	arena "locgame-mini-server/pkg/dto/arena"
	base "locgame-mini-server/pkg/dto/base"
	cards "locgame-mini-server/pkg/dto/cards"
	friends "locgame-mini-server/pkg/dto/friends"
	maintenance "locgame-mini-server/pkg/dto/maintenance"
	resources "locgame-mini-server/pkg/dto/resources"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameType int32

const (
	GameType_NoneGameType        GameType = 0
	GameType_QuickMatch          GameType = 1
	GameType_QuickMatchWithStake GameType = 2
	GameType_FriendlyMatch       GameType = 3
	GameType_AiMatch             GameType = 4
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "NoneGameType",
		1: "QuickMatch",
		2: "QuickMatchWithStake",
		3: "FriendlyMatch",
		4: "AiMatch",
	}
	GameType_value = map[string]int32{
		"NoneGameType":        0,
		"QuickMatch":          1,
		"QuickMatchWithStake": 2,
		"FriendlyMatch":       3,
		"AiMatch":             4,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_proto_enumTypes[0].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_game_proto_enumTypes[0]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

type PlayerType int32

const (
	PlayerType_Real PlayerType = 0
	PlayerType_AI   PlayerType = 1
)

// Enum value maps for PlayerType.
var (
	PlayerType_name = map[int32]string{
		0: "Real",
		1: "AI",
	}
	PlayerType_value = map[string]int32{
		"Real": 0,
		"AI":   1,
	}
)

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_proto_enumTypes[1].Descriptor()
}

func (PlayerType) Type() protoreflect.EnumType {
	return &file_game_proto_enumTypes[1]
}

func (x PlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerType.Descriptor instead.
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

type MoveType int32

const (
	MoveType_NoneMoveType MoveType = 0
	MoveType_PlaceCard    MoveType = 1
	MoveType_Attack       MoveType = 2
	MoveType_SkipMove     MoveType = 3
)

// Enum value maps for MoveType.
var (
	MoveType_name = map[int32]string{
		0: "NoneMoveType",
		1: "PlaceCard",
		2: "Attack",
		3: "SkipMove",
	}
	MoveType_value = map[string]int32{
		"NoneMoveType": 0,
		"PlaceCard":    1,
		"Attack":       2,
		"SkipMove":     3,
	}
)

func (x MoveType) Enum() *MoveType {
	p := new(MoveType)
	*p = x
	return p
}

func (x MoveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoveType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_proto_enumTypes[2].Descriptor()
}

func (MoveType) Type() protoreflect.EnumType {
	return &file_game_proto_enumTypes[2]
}

func (x MoveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoveType.Descriptor instead.
func (MoveType) EnumDescriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

type Configs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources           []*resources.ResourceData               `protobuf:"bytes,1,rep,name=Resources,proto3" json:"Resources,omitempty" yaml:"Resources,omitempty" bson:"resources,omitempty"`
	ResourceCategories  []*resources.ResourceCategory           `protobuf:"bytes,2,rep,name=ResourceCategories,proto3" json:"ResourceCategories,omitempty" yaml:"ResourceCategories,omitempty" bson:"resource_categories,omitempty"`
	CappedResources     map[int32]*resources.CappedResource     `protobuf:"bytes,3,rep,name=CappedResources,proto3" json:"CappedResources,omitempty" yaml:"CappedResources,omitempty" bson:"capped_resources,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResettableResources map[int32]*resources.ResettableResource `protobuf:"bytes,4,rep,name=ResettableResources,proto3" json:"ResettableResources,omitempty" yaml:"ResettableResources,omitempty" bson:"resettable_resources,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cards               map[string]*cards.Card                  `protobuf:"bytes,5,rep,name=Cards,proto3" json:"Cards,omitempty" yaml:"Cards,omitempty" bson:"cards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StoryMode           map[int32]*StoryModeMissionData         `protobuf:"bytes,6,rep,name=StoryMode,proto3" json:"StoryMode,omitempty" yaml:"StoryMode,omitempty" bson:"story_mode,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TrophyRoadRewards   []*arena.TrophyRoadRewards              `protobuf:"bytes,7,rep,name=TrophyRoadRewards,proto3" json:"TrophyRoadRewards,omitempty" yaml:"TrophyRoadRewards,omitempty" bson:"trophy_road_rewards,omitempty"`
	Leagues             map[int32]*arena.LeagueData             `protobuf:"bytes,8,rep,name=Leagues,proto3" json:"Leagues,omitempty" yaml:"Leagues,omitempty" bson:"leagues,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FriendlyMatch       *friends.FriendlyMatchConfig            `protobuf:"bytes,9,opt,name=FriendlyMatch,proto3" json:"FriendlyMatch,omitempty" yaml:"FriendlyMatch,omitempty" bson:"friendly_match,omitempty"`
	ExtraRewards        *ExtraRewards                           `protobuf:"bytes,10,opt,name=ExtraRewards,proto3" json:"ExtraRewards,omitempty" yaml:"ExtraRewards,omitempty" bson:"extra_rewards,omitempty"`
	MatchTimer          *MatchTimer                             `protobuf:"bytes,11,opt,name=MatchTimer,proto3" json:"MatchTimer,omitempty" yaml:"MatchTimer,omitempty" bson:"match_timer,omitempty"`
	NextMaintenance     *maintenance.MaintenanceData            `protobuf:"bytes,22,opt,name=NextMaintenance,proto3" json:"NextMaintenance,omitempty" yaml:"NextMaintenance,omitempty" bson:"next_maintenance,omitempty"`
}

func (x *Configs) Reset() {
	*x = Configs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configs) ProtoMessage() {}

func (x *Configs) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configs.ProtoReflect.Descriptor instead.
func (*Configs) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

func (x *Configs) GetResources() []*resources.ResourceData {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Configs) GetResourceCategories() []*resources.ResourceCategory {
	if x != nil {
		return x.ResourceCategories
	}
	return nil
}

func (x *Configs) GetCappedResources() map[int32]*resources.CappedResource {
	if x != nil {
		return x.CappedResources
	}
	return nil
}

func (x *Configs) GetResettableResources() map[int32]*resources.ResettableResource {
	if x != nil {
		return x.ResettableResources
	}
	return nil
}

func (x *Configs) GetCards() map[string]*cards.Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Configs) GetStoryMode() map[int32]*StoryModeMissionData {
	if x != nil {
		return x.StoryMode
	}
	return nil
}

func (x *Configs) GetTrophyRoadRewards() []*arena.TrophyRoadRewards {
	if x != nil {
		return x.TrophyRoadRewards
	}
	return nil
}

func (x *Configs) GetLeagues() map[int32]*arena.LeagueData {
	if x != nil {
		return x.Leagues
	}
	return nil
}

func (x *Configs) GetFriendlyMatch() *friends.FriendlyMatchConfig {
	if x != nil {
		return x.FriendlyMatch
	}
	return nil
}

func (x *Configs) GetExtraRewards() *ExtraRewards {
	if x != nil {
		return x.ExtraRewards
	}
	return nil
}

func (x *Configs) GetMatchTimer() *MatchTimer {
	if x != nil {
		return x.MatchTimer
	}
	return nil
}

func (x *Configs) GetNextMaintenance() *maintenance.MaintenanceData {
	if x != nil {
		return x.NextMaintenance
	}
	return nil
}

type MatchmakingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type GameType `protobuf:"varint,1,opt,name=Type,proto3,enum=game.GameType" json:"Type,omitempty" yaml:"Type,omitempty" bson:"type,omitempty"`
}

func (x *MatchmakingRequest) Reset() {
	*x = MatchmakingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingRequest) ProtoMessage() {}

func (x *MatchmakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingRequest.ProtoReflect.Descriptor instead.
func (*MatchmakingRequest) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

func (x *MatchmakingRequest) GetType() GameType {
	if x != nil {
		return x.Type
	}
	return GameType_NoneGameType
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *base.ObjectID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" yaml:"ID,omitempty" bson:"_id,omitempty"`
	PlayerType PlayerType     `protobuf:"varint,2,opt,name=PlayerType,proto3,enum=game.PlayerType" json:"PlayerType,omitempty" yaml:"PlayerType,omitempty" bson:"player_type,omitempty"`
	Name       string         `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty" yaml:"Name,omitempty" bson:"name,omitempty"`
	AvatarID   string         `protobuf:"bytes,4,opt,name=AvatarID,proto3" json:"AvatarID,omitempty" yaml:"AvatarID,omitempty" bson:"avatar_id,omitempty"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerInfo) GetID() *base.ObjectID {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *PlayerInfo) GetPlayerType() PlayerType {
	if x != nil {
		return x.PlayerType
	}
	return PlayerType_Real
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerInfo) GetAvatarID() string {
	if x != nil {
		return x.AvatarID
	}
	return ""
}

type BeginMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardsInDeck         int32    `protobuf:"varint,1,opt,name=CardsInDeck,proto3" json:"CardsInDeck,omitempty" yaml:"CardsInDeck,omitempty" bson:"cards_in_deck,omitempty"`
	CardsInOpponentDeck int32    `protobuf:"varint,2,opt,name=CardsInOpponentDeck,proto3" json:"CardsInOpponentDeck,omitempty" yaml:"CardsInOpponentDeck,omitempty" bson:"cards_in_opponent_deck,omitempty"`
	StartHand           []string `protobuf:"bytes,3,rep,name=StartHand,proto3" json:"StartHand,omitempty" yaml:"StartHand,omitempty" bson:"start_hand,omitempty"`
	PlayerTurn          bool     `protobuf:"varint,4,opt,name=PlayerTurn,proto3" json:"PlayerTurn,omitempty" yaml:"PlayerTurn,omitempty" bson:"player_turn"`
	CardsInOpponentHand int32    `protobuf:"varint,5,opt,name=CardsInOpponentHand,proto3" json:"CardsInOpponentHand,omitempty" yaml:"CardsInOpponentHand,omitempty" bson:"cards_in_opponent_hand,omitempty"`
}

func (x *BeginMatch) Reset() {
	*x = BeginMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginMatch) ProtoMessage() {}

func (x *BeginMatch) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginMatch.ProtoReflect.Descriptor instead.
func (*BeginMatch) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{3}
}

func (x *BeginMatch) GetCardsInDeck() int32 {
	if x != nil {
		return x.CardsInDeck
	}
	return 0
}

func (x *BeginMatch) GetCardsInOpponentDeck() int32 {
	if x != nil {
		return x.CardsInOpponentDeck
	}
	return 0
}

func (x *BeginMatch) GetStartHand() []string {
	if x != nil {
		return x.StartHand
	}
	return nil
}

func (x *BeginMatch) GetPlayerTurn() bool {
	if x != nil {
		return x.PlayerTurn
	}
	return false
}

func (x *BeginMatch) GetCardsInOpponentHand() int32 {
	if x != nil {
		return x.CardsInOpponentHand
	}
	return 0
}

type MatchmakingCompleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchID         string      `protobuf:"bytes,1,opt,name=MatchID,proto3" json:"MatchID,omitempty" yaml:"MatchID,omitempty" bson:"match_id,omitempty"`
	Opponent        *PlayerInfo `protobuf:"bytes,2,opt,name=Opponent,proto3" json:"Opponent,omitempty" yaml:"Opponent,omitempty" bson:"opponent,omitempty"`
	IsExternalMatch bool        `protobuf:"varint,7,opt,name=IsExternalMatch,proto3" json:"IsExternalMatch,omitempty" yaml:"IsExternalMatch,omitempty" bson:"is_external_match"`
}

func (x *MatchmakingCompleteMessage) Reset() {
	*x = MatchmakingCompleteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingCompleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingCompleteMessage) ProtoMessage() {}

func (x *MatchmakingCompleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingCompleteMessage.ProtoReflect.Descriptor instead.
func (*MatchmakingCompleteMessage) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{4}
}

func (x *MatchmakingCompleteMessage) GetMatchID() string {
	if x != nil {
		return x.MatchID
	}
	return ""
}

func (x *MatchmakingCompleteMessage) GetOpponent() *PlayerInfo {
	if x != nil {
		return x.Opponent
	}
	return nil
}

func (x *MatchmakingCompleteMessage) GetIsExternalMatch() bool {
	if x != nil {
		return x.IsExternalMatch
	}
	return false
}

type MoveResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Move      *CardMove      `protobuf:"bytes,1,opt,name=Move,proto3" json:"Move,omitempty" yaml:"Move,omitempty" bson:"move,omitempty"`
	Placement *CardPlacement `protobuf:"bytes,2,opt,name=Placement,proto3" json:"Placement,omitempty" yaml:"Placement,omitempty" bson:"placement,omitempty"`
	Destroy   *Coordinates   `protobuf:"bytes,3,opt,name=Destroy,proto3" json:"Destroy,omitempty" yaml:"Destroy,omitempty" bson:"destroy,omitempty"`
	Change    *CardChange    `protobuf:"bytes,4,opt,name=Change,proto3" json:"Change,omitempty" yaml:"Change,omitempty" bson:"change,omitempty"`
	EndTurn   bool           `protobuf:"varint,6,opt,name=EndTurn,proto3" json:"EndTurn,omitempty" yaml:"EndTurn,omitempty" bson:"end_turn"`
}

func (x *MoveResult) Reset() {
	*x = MoveResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResult) ProtoMessage() {}

func (x *MoveResult) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResult.ProtoReflect.Descriptor instead.
func (*MoveResult) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{5}
}

func (x *MoveResult) GetMove() *CardMove {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *MoveResult) GetPlacement() *CardPlacement {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *MoveResult) GetDestroy() *Coordinates {
	if x != nil {
		return x.Destroy
	}
	return nil
}

func (x *MoveResult) GetChange() *CardChange {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *MoveResult) GetEndTurn() bool {
	if x != nil {
		return x.EndTurn
	}
	return false
}

type CardChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coords    *Coordinates  `protobuf:"bytes,1,opt,name=Coords,proto3" json:"Coords,omitempty" yaml:"Coords,omitempty" bson:"coords,omitempty"`
	Params    *cards.Boosts `protobuf:"bytes,2,opt,name=Params,proto3" json:"Params,omitempty" yaml:"Params,omitempty" bson:"params,omitempty"`
	Initiator *Coordinates  `protobuf:"bytes,3,opt,name=Initiator,proto3" json:"Initiator,omitempty" yaml:"Initiator,omitempty" bson:"initiator,omitempty"`
}

func (x *CardChange) Reset() {
	*x = CardChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChange) ProtoMessage() {}

func (x *CardChange) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChange.ProtoReflect.Descriptor instead.
func (*CardChange) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{6}
}

func (x *CardChange) GetCoords() *Coordinates {
	if x != nil {
		return x.Coords
	}
	return nil
}

func (x *CardChange) GetParams() *cards.Boosts {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CardChange) GetInitiator() *Coordinates {
	if x != nil {
		return x.Initiator
	}
	return nil
}

type CardPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardID string       `protobuf:"bytes,1,opt,name=CardID,proto3" json:"CardID,omitempty" yaml:"CardID,omitempty" bson:"card_id,omitempty"`
	To     *Coordinates `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty" yaml:"To,omitempty" bson:"to,omitempty"`
}

func (x *CardPlacement) Reset() {
	*x = CardPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPlacement) ProtoMessage() {}

func (x *CardPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPlacement.ProtoReflect.Descriptor instead.
func (*CardPlacement) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{7}
}

func (x *CardPlacement) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *CardPlacement) GetTo() *Coordinates {
	if x != nil {
		return x.To
	}
	return nil
}

type CardMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Coordinates `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty" yaml:"From,omitempty" bson:"from,omitempty"`
	To   *Coordinates `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty" yaml:"To,omitempty" bson:"to,omitempty"`
}

func (x *CardMove) Reset() {
	*x = CardMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardMove) ProtoMessage() {}

func (x *CardMove) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardMove.ProtoReflect.Descriptor instead.
func (*CardMove) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{8}
}

func (x *CardMove) GetFrom() *Coordinates {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CardMove) GetTo() *Coordinates {
	if x != nil {
		return x.To
	}
	return nil
}

type EndOpponentTurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCardsInHand int32 `protobuf:"varint,1,opt,name=NewCardsInHand,proto3" json:"NewCardsInHand,omitempty" yaml:"NewCardsInHand,omitempty" bson:"new_cards_in_hand,omitempty"`
	CardsInDeck    int32 `protobuf:"varint,2,opt,name=CardsInDeck,proto3" json:"CardsInDeck,omitempty" yaml:"CardsInDeck,omitempty" bson:"cards_in_deck,omitempty"`
}

func (x *EndOpponentTurn) Reset() {
	*x = EndOpponentTurn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOpponentTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOpponentTurn) ProtoMessage() {}

func (x *EndOpponentTurn) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOpponentTurn.ProtoReflect.Descriptor instead.
func (*EndOpponentTurn) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{9}
}

func (x *EndOpponentTurn) GetNewCardsInHand() int32 {
	if x != nil {
		return x.NewCardsInHand
	}
	return 0
}

func (x *EndOpponentTurn) GetCardsInDeck() int32 {
	if x != nil {
		return x.CardsInDeck
	}
	return 0
}

type EndTurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCardsInHand []string `protobuf:"bytes,1,rep,name=NewCardsInHand,proto3" json:"NewCardsInHand,omitempty" yaml:"NewCardsInHand,omitempty" bson:"new_cards_in_hand,omitempty"`
	CardsInDeck    int32    `protobuf:"varint,2,opt,name=CardsInDeck,proto3" json:"CardsInDeck,omitempty" yaml:"CardsInDeck,omitempty" bson:"cards_in_deck,omitempty"`
}

func (x *EndTurn) Reset() {
	*x = EndTurn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTurn) ProtoMessage() {}

func (x *EndTurn) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTurn.ProtoReflect.Descriptor instead.
func (*EndTurn) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{10}
}

func (x *EndTurn) GetNewCardsInHand() []string {
	if x != nil {
		return x.NewCardsInHand
	}
	return nil
}

func (x *EndTurn) GetCardsInDeck() int32 {
	if x != nil {
		return x.CardsInDeck
	}
	return 0
}

type MatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winner               *base.ObjectID               `protobuf:"bytes,1,opt,name=Winner,proto3" json:"Winner,omitempty" yaml:"Winner,omitempty" bson:"winner,omitempty"`
	StoryModeMatchResult *StoryModeMatchResult        `protobuf:"bytes,2,opt,name=StoryModeMatchResult,proto3" json:"StoryModeMatchResult,omitempty" yaml:"StoryModeMatchResult,omitempty" bson:"story_mode_match_result,omitempty"`
	ArenaMatchResult     *arena.ArenaMatchResult      `protobuf:"bytes,3,opt,name=ArenaMatchResult,proto3" json:"ArenaMatchResult,omitempty" yaml:"ArenaMatchResult,omitempty" bson:"arena_match_result,omitempty"`
	FriendlyMatchResult  *friends.FriendlyMatchResult `protobuf:"bytes,4,opt,name=FriendlyMatchResult,proto3" json:"FriendlyMatchResult,omitempty" yaml:"FriendlyMatchResult,omitempty" bson:"friendly_match_result,omitempty"`
}

func (x *MatchResult) Reset() {
	*x = MatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResult) ProtoMessage() {}

func (x *MatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResult.ProtoReflect.Descriptor instead.
func (*MatchResult) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{11}
}

func (x *MatchResult) GetWinner() *base.ObjectID {
	if x != nil {
		return x.Winner
	}
	return nil
}

func (x *MatchResult) GetStoryModeMatchResult() *StoryModeMatchResult {
	if x != nil {
		return x.StoryModeMatchResult
	}
	return nil
}

func (x *MatchResult) GetArenaMatchResult() *arena.ArenaMatchResult {
	if x != nil {
		return x.ArenaMatchResult
	}
	return nil
}

func (x *MatchResult) GetFriendlyMatchResult() *friends.FriendlyMatchResult {
	if x != nil {
		return x.FriendlyMatchResult
	}
	return nil
}

type Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardID   string       `protobuf:"bytes,1,opt,name=CardID,proto3" json:"CardID,omitempty" yaml:"CardID,omitempty" bson:"card_id,omitempty"`
	MoveType MoveType     `protobuf:"varint,2,opt,name=MoveType,proto3,enum=game.MoveType" json:"MoveType,omitempty" yaml:"MoveType,omitempty" bson:"move_type,omitempty"`
	From     *Coordinates `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty" yaml:"From,omitempty" bson:"from,omitempty"`
	To       *Coordinates `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty" yaml:"To,omitempty" bson:"to,omitempty"`
}

func (x *Move) Reset() {
	*x = Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Move) ProtoMessage() {}

func (x *Move) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Move.ProtoReflect.Descriptor instead.
func (*Move) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{12}
}

func (x *Move) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *Move) GetMoveType() MoveType {
	if x != nil {
		return x.MoveType
	}
	return MoveType_NoneMoveType
}

func (x *Move) GetFrom() *Coordinates {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Move) GetTo() *Coordinates {
	if x != nil {
		return x.To
	}
	return nil
}

type Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty" yaml:"X,omitempty" bson:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty" yaml:"Y,omitempty" bson:"y,omitempty"`
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{13}
}

func (x *Coordinates) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinates) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type MissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mission int32 `protobuf:"varint,1,opt,name=Mission,proto3" json:"Mission,omitempty" yaml:"Mission,omitempty" bson:"mission,omitempty"`
}

func (x *MissionRequest) Reset() {
	*x = MissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionRequest) ProtoMessage() {}

func (x *MissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionRequest.ProtoReflect.Descriptor instead.
func (*MissionRequest) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{14}
}

func (x *MissionRequest) GetMission() int32 {
	if x != nil {
		return x.Mission
	}
	return 0
}

type StoryModeMissionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotID   string                          `protobuf:"bytes,1,opt,name=BotID,proto3" json:"BotID,omitempty" yaml:"BotID,omitempty" bson:"bot_id,omitempty"`
	Rewards []*resources.ResourceAdjustment `protobuf:"bytes,2,rep,name=Rewards,proto3" json:"Rewards,omitempty" yaml:"Rewards,omitempty" bson:"rewards,omitempty"`
}

func (x *StoryModeMissionData) Reset() {
	*x = StoryModeMissionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryModeMissionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryModeMissionData) ProtoMessage() {}

func (x *StoryModeMissionData) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryModeMissionData.ProtoReflect.Descriptor instead.
func (*StoryModeMissionData) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{15}
}

func (x *StoryModeMissionData) GetBotID() string {
	if x != nil {
		return x.BotID
	}
	return ""
}

func (x *StoryModeMissionData) GetRewards() []*resources.ResourceAdjustment {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type StoryModeMatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*resources.ResourceAdjustment `protobuf:"bytes,2,rep,name=Rewards,proto3" json:"Rewards,omitempty" yaml:"Rewards,omitempty" bson:"rewards,omitempty"`
}

func (x *StoryModeMatchResult) Reset() {
	*x = StoryModeMatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryModeMatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryModeMatchResult) ProtoMessage() {}

func (x *StoryModeMatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryModeMatchResult.ProtoReflect.Descriptor instead.
func (*StoryModeMatchResult) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{16}
}

func (x *StoryModeMatchResult) GetRewards() []*resources.ResourceAdjustment {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type ExtraRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComboAttacks   map[int32]*resources.ResourceAdjustment `protobuf:"bytes,1,rep,name=ComboAttacks,proto3" json:"ComboAttacks,omitempty" yaml:"ComboAttacks,omitempty" bson:"combo_attacks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CenterStage    map[int32]*resources.ResourceAdjustment `protobuf:"bytes,2,rep,name=CenterStage,proto3" json:"CenterStage,omitempty" yaml:"CenterStage,omitempty" bson:"center_stage,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CardsInField   map[int32]*resources.ResourceAdjustment `protobuf:"bytes,3,rep,name=CardsInField,proto3" json:"CardsInField,omitempty" yaml:"CardsInField,omitempty" bson:"cards_in_field,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StoryMode      bool                                    `protobuf:"varint,4,opt,name=StoryMode,proto3" json:"StoryMode,omitempty" yaml:"StoryMode,omitempty" bson:"story_mode"`
	ArenaMode      bool                                    `protobuf:"varint,5,opt,name=ArenaMode,proto3" json:"ArenaMode,omitempty" yaml:"ArenaMode,omitempty" bson:"arena_mode"`
	FriendlyMode   bool                                    `protobuf:"varint,6,opt,name=FriendlyMode,proto3" json:"FriendlyMode,omitempty" yaml:"FriendlyMode,omitempty" bson:"friendly_mode"`
	QuickMatchMode bool                                    `protobuf:"varint,7,opt,name=QuickMatchMode,proto3" json:"QuickMatchMode,omitempty" yaml:"QuickMatchMode,omitempty" bson:"quick_match_mode"`
}

func (x *ExtraRewards) Reset() {
	*x = ExtraRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraRewards) ProtoMessage() {}

func (x *ExtraRewards) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraRewards.ProtoReflect.Descriptor instead.
func (*ExtraRewards) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{17}
}

func (x *ExtraRewards) GetComboAttacks() map[int32]*resources.ResourceAdjustment {
	if x != nil {
		return x.ComboAttacks
	}
	return nil
}

func (x *ExtraRewards) GetCenterStage() map[int32]*resources.ResourceAdjustment {
	if x != nil {
		return x.CenterStage
	}
	return nil
}

func (x *ExtraRewards) GetCardsInField() map[int32]*resources.ResourceAdjustment {
	if x != nil {
		return x.CardsInField
	}
	return nil
}

func (x *ExtraRewards) GetStoryMode() bool {
	if x != nil {
		return x.StoryMode
	}
	return false
}

func (x *ExtraRewards) GetArenaMode() bool {
	if x != nil {
		return x.ArenaMode
	}
	return false
}

func (x *ExtraRewards) GetFriendlyMode() bool {
	if x != nil {
		return x.FriendlyMode
	}
	return false
}

func (x *ExtraRewards) GetQuickMatchMode() bool {
	if x != nil {
		return x.QuickMatchMode
	}
	return false
}

type MatchTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration     int32 `protobuf:"varint,1,opt,name=Duration,proto3" json:"Duration,omitempty" yaml:"Duration,omitempty" bson:"duration,omitempty"`
	StoryMode    bool  `protobuf:"varint,2,opt,name=StoryMode,proto3" json:"StoryMode,omitempty" yaml:"StoryMode,omitempty" bson:"story_mode"`
	ArenaMode    bool  `protobuf:"varint,3,opt,name=ArenaMode,proto3" json:"ArenaMode,omitempty" yaml:"ArenaMode,omitempty" bson:"arena_mode"`
	FriendlyMode bool  `protobuf:"varint,4,opt,name=FriendlyMode,proto3" json:"FriendlyMode,omitempty" yaml:"FriendlyMode,omitempty" bson:"friendly_mode"`
	QuickMode    bool  `protobuf:"varint,5,opt,name=QuickMode,proto3" json:"QuickMode,omitempty" yaml:"QuickMode,omitempty" bson:"quick_mode"`
}

func (x *MatchTimer) Reset() {
	*x = MatchTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTimer) ProtoMessage() {}

func (x *MatchTimer) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTimer.ProtoReflect.Descriptor instead.
func (*MatchTimer) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{18}
}

func (x *MatchTimer) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MatchTimer) GetStoryMode() bool {
	if x != nil {
		return x.StoryMode
	}
	return false
}

func (x *MatchTimer) GetArenaMode() bool {
	if x != nil {
		return x.ArenaMode
	}
	return false
}

func (x *MatchTimer) GetFriendlyMode() bool {
	if x != nil {
		return x.FriendlyMode
	}
	return false
}

func (x *MatchTimer) GetQuickMode() bool {
	if x != nil {
		return x.QuickMode
	}
	return false
}

var File_game_proto protoreflect.FileDescriptor

var file_game_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x09, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x43,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x43, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x46, 0x0a, 0x11, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x65,
	0x6e, 0x61, 0x2e, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x11, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x52, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x36, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52,
	0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x4e,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0x5d, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x65, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x0a, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x58, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0c, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x12, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x44, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x44, 0x65,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49,
	0x6e, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e,
	0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e,
	0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x08, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x49, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x22,
	0x8f, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x06, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2f, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x4a, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x02, 0x54, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x54, 0x0a,
	0x08, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x21, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x02, 0x54, 0x6f, 0x22, 0x5b, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x49, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x44, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x44, 0x65, 0x63, 0x6b,
	0x22, 0x53, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4e,
	0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x44, 0x65,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49,
	0x6e, 0x44, 0x65, 0x63, 0x6b, 0x22, 0x9a, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x14, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a,
	0x10, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x2e,
	0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x10, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x29, 0x0a, 0x0b, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x59, 0x22, 0x2a, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x65, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x37,
	0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x37, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x90, 0x05, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x5e, 0x0a, 0x11,
	0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x10,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x11, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x2a, 0x65, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x04, 0x2a, 0x1e, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61,
	0x6c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x49, 0x10, 0x01, 0x2a, 0x45, 0x0a, 0x08, 0x4d,
	0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x65, 0x4d,
	0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x70, 0x4d, 0x6f, 0x76, 0x65,
	0x10, 0x03, 0x42, 0x2e, 0x5a, 0x1c, 0x6c, 0x6f, 0x63, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x74, 0x6f, 0x2f, 0x67, 0x61,
	0x6d, 0x65, 0xaa, 0x02, 0x0d, 0x4c, 0x6f, 0x43, 0x2e, 0x44, 0x54, 0x4f, 0x73, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_proto_rawDescOnce sync.Once
	file_game_proto_rawDescData = file_game_proto_rawDesc
)

func file_game_proto_rawDescGZIP() []byte {
	file_game_proto_rawDescOnce.Do(func() {
		file_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_proto_rawDescData)
	})
	return file_game_proto_rawDescData
}

var file_game_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_game_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_game_proto_goTypes = []any{
	(GameType)(0),                        // 0: game.GameType
	(PlayerType)(0),                      // 1: game.PlayerType
	(MoveType)(0),                        // 2: game.MoveType
	(*Configs)(nil),                      // 3: game.Configs
	(*MatchmakingRequest)(nil),           // 4: game.MatchmakingRequest
	(*PlayerInfo)(nil),                   // 5: game.PlayerInfo
	(*BeginMatch)(nil),                   // 6: game.BeginMatch
	(*MatchmakingCompleteMessage)(nil),   // 7: game.MatchmakingCompleteMessage
	(*MoveResult)(nil),                   // 8: game.MoveResult
	(*CardChange)(nil),                   // 9: game.CardChange
	(*CardPlacement)(nil),                // 10: game.CardPlacement
	(*CardMove)(nil),                     // 11: game.CardMove
	(*EndOpponentTurn)(nil),              // 12: game.EndOpponentTurn
	(*EndTurn)(nil),                      // 13: game.EndTurn
	(*MatchResult)(nil),                  // 14: game.MatchResult
	(*Move)(nil),                         // 15: game.Move
	(*Coordinates)(nil),                  // 16: game.Coordinates
	(*MissionRequest)(nil),               // 17: game.MissionRequest
	(*StoryModeMissionData)(nil),         // 18: game.StoryModeMissionData
	(*StoryModeMatchResult)(nil),         // 19: game.StoryModeMatchResult
	(*ExtraRewards)(nil),                 // 20: game.ExtraRewards
	(*MatchTimer)(nil),                   // 21: game.MatchTimer
	nil,                                  // 22: game.Configs.CappedResourcesEntry
	nil,                                  // 23: game.Configs.ResettableResourcesEntry
	nil,                                  // 24: game.Configs.CardsEntry
	nil,                                  // 25: game.Configs.StoryModeEntry
	nil,                                  // 26: game.Configs.LeaguesEntry
	nil,                                  // 27: game.ExtraRewards.ComboAttacksEntry
	nil,                                  // 28: game.ExtraRewards.CenterStageEntry
	nil,                                  // 29: game.ExtraRewards.CardsInFieldEntry
	(*resources.ResourceData)(nil),       // 30: resources.ResourceData
	(*resources.ResourceCategory)(nil),   // 31: resources.ResourceCategory
	(*arena.TrophyRoadRewards)(nil),      // 32: arena.TrophyRoadRewards
	(*friends.FriendlyMatchConfig)(nil),  // 33: friends.FriendlyMatchConfig
	(*maintenance.MaintenanceData)(nil),  // 34: maintenance.MaintenanceData
	(*base.ObjectID)(nil),                // 35: base.ObjectID
	(*cards.Boosts)(nil),                 // 36: cards.Boosts
	(*arena.ArenaMatchResult)(nil),       // 37: arena.ArenaMatchResult
	(*friends.FriendlyMatchResult)(nil),  // 38: friends.FriendlyMatchResult
	(*resources.ResourceAdjustment)(nil), // 39: resources.ResourceAdjustment
	(*resources.CappedResource)(nil),     // 40: resources.CappedResource
	(*resources.ResettableResource)(nil), // 41: resources.ResettableResource
	(*cards.Card)(nil),                   // 42: cards.Card
	(*arena.LeagueData)(nil),             // 43: arena.LeagueData
}
var file_game_proto_depIdxs = []int32{
	30, // 0: game.Configs.Resources:type_name -> resources.ResourceData
	31, // 1: game.Configs.ResourceCategories:type_name -> resources.ResourceCategory
	22, // 2: game.Configs.CappedResources:type_name -> game.Configs.CappedResourcesEntry
	23, // 3: game.Configs.ResettableResources:type_name -> game.Configs.ResettableResourcesEntry
	24, // 4: game.Configs.Cards:type_name -> game.Configs.CardsEntry
	25, // 5: game.Configs.StoryMode:type_name -> game.Configs.StoryModeEntry
	32, // 6: game.Configs.TrophyRoadRewards:type_name -> arena.TrophyRoadRewards
	26, // 7: game.Configs.Leagues:type_name -> game.Configs.LeaguesEntry
	33, // 8: game.Configs.FriendlyMatch:type_name -> friends.FriendlyMatchConfig
	20, // 9: game.Configs.ExtraRewards:type_name -> game.ExtraRewards
	21, // 10: game.Configs.MatchTimer:type_name -> game.MatchTimer
	34, // 11: game.Configs.NextMaintenance:type_name -> maintenance.MaintenanceData
	0,  // 12: game.MatchmakingRequest.Type:type_name -> game.GameType
	35, // 13: game.PlayerInfo.ID:type_name -> base.ObjectID
	1,  // 14: game.PlayerInfo.PlayerType:type_name -> game.PlayerType
	5,  // 15: game.MatchmakingCompleteMessage.Opponent:type_name -> game.PlayerInfo
	11, // 16: game.MoveResult.Move:type_name -> game.CardMove
	10, // 17: game.MoveResult.Placement:type_name -> game.CardPlacement
	16, // 18: game.MoveResult.Destroy:type_name -> game.Coordinates
	9,  // 19: game.MoveResult.Change:type_name -> game.CardChange
	16, // 20: game.CardChange.Coords:type_name -> game.Coordinates
	36, // 21: game.CardChange.Params:type_name -> cards.Boosts
	16, // 22: game.CardChange.Initiator:type_name -> game.Coordinates
	16, // 23: game.CardPlacement.To:type_name -> game.Coordinates
	16, // 24: game.CardMove.From:type_name -> game.Coordinates
	16, // 25: game.CardMove.To:type_name -> game.Coordinates
	35, // 26: game.MatchResult.Winner:type_name -> base.ObjectID
	19, // 27: game.MatchResult.StoryModeMatchResult:type_name -> game.StoryModeMatchResult
	37, // 28: game.MatchResult.ArenaMatchResult:type_name -> arena.ArenaMatchResult
	38, // 29: game.MatchResult.FriendlyMatchResult:type_name -> friends.FriendlyMatchResult
	2,  // 30: game.Move.MoveType:type_name -> game.MoveType
	16, // 31: game.Move.From:type_name -> game.Coordinates
	16, // 32: game.Move.To:type_name -> game.Coordinates
	39, // 33: game.StoryModeMissionData.Rewards:type_name -> resources.ResourceAdjustment
	39, // 34: game.StoryModeMatchResult.Rewards:type_name -> resources.ResourceAdjustment
	27, // 35: game.ExtraRewards.ComboAttacks:type_name -> game.ExtraRewards.ComboAttacksEntry
	28, // 36: game.ExtraRewards.CenterStage:type_name -> game.ExtraRewards.CenterStageEntry
	29, // 37: game.ExtraRewards.CardsInField:type_name -> game.ExtraRewards.CardsInFieldEntry
	40, // 38: game.Configs.CappedResourcesEntry.value:type_name -> resources.CappedResource
	41, // 39: game.Configs.ResettableResourcesEntry.value:type_name -> resources.ResettableResource
	42, // 40: game.Configs.CardsEntry.value:type_name -> cards.Card
	18, // 41: game.Configs.StoryModeEntry.value:type_name -> game.StoryModeMissionData
	43, // 42: game.Configs.LeaguesEntry.value:type_name -> arena.LeagueData
	39, // 43: game.ExtraRewards.ComboAttacksEntry.value:type_name -> resources.ResourceAdjustment
	39, // 44: game.ExtraRewards.CenterStageEntry.value:type_name -> resources.ResourceAdjustment
	39, // 45: game.ExtraRewards.CardsInFieldEntry.value:type_name -> resources.ResourceAdjustment
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_game_proto_init() }
func file_game_proto_init() {
	if File_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_game_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Configs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MatchmakingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BeginMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MatchmakingCompleteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MoveResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CardChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CardPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CardMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*EndOpponentTurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*EndTurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StoryModeMissionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*StoryModeMatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ExtraRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MatchTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_game_proto_goTypes,
		DependencyIndexes: file_game_proto_depIdxs,
		EnumInfos:         file_game_proto_enumTypes,
		MessageInfos:      file_game_proto_msgTypes,
	}.Build()
	File_game_proto = out.File
	file_game_proto_rawDesc = nil
	file_game_proto_goTypes = nil
	file_game_proto_depIdxs = nil
}
