// Copyright Â© 2024 FuryLion Group LLC. All Rights Reserved.
//
// Unauthorized copying of this file, via any medium is strictly prohibited
// without the express permission of FuryLion Group LLC.
// Proprietary and confidential.

// Code generated by network-gen. DO NOT EDIT.
// source: proto/handlers.network

package dto

import (
	"reflect"
	"runtime"

	protobuf "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
	"locgame-mini-server/pkg/log"
	"locgame-mini-server/pkg/dto/errors"
	"locgame-mini-server/pkg/dto/options"
	"locgame-mini-server/pkg/network"

	"locgame-mini-server/pkg/dto/accounts"
	"locgame-mini-server/pkg/dto/arena"
	"locgame-mini-server/pkg/dto/base"
	"locgame-mini-server/pkg/dto/cards"
	"locgame-mini-server/pkg/dto/friends"
	"locgame-mini-server/pkg/dto/game"
	"locgame-mini-server/pkg/dto/maintenance"
	"locgame-mini-server/pkg/dto/matches"
	"locgame-mini-server/pkg/dto/player"
	"locgame-mini-server/pkg/dto/resources"
	"locgame-mini-server/pkg/dto/store"
	"locgame-mini-server/pkg/dto/tutorial"
)

type ServerHandler struct {
	methodByID          map[uint16]func(*network.Client, any)
	methodByIDWithReply map[uint16]func(*network.Client, any) (protobuf.Message, error)
	argTypeByMethodID   map[uint16]reflect.Type
	methodNameByID      map[uint16]string
	cachedMethods       map[uint16]*network.Packet
}

type ServerRouter interface {
	// GetConfigs returns all the configurations required for the client to work.
	GetConfigs(*network.Client, *base.Empty) (*game.Configs, error)
	AuthToken(*network.Client, *accounts.RefreshTokenRequest) (*accounts.LoginResponse, error)
	Web3ChallengeRequest(*network.Client, *accounts.Web3AuthRequest) (*accounts.Web3ChallengeResponse, error)
	Web3Authorize(*network.Client, *accounts.Web3Signature) (*accounts.LoginResponse, error)
	FakeWeb3Authorize(*network.Client, *accounts.Web3AuthRequest) (*accounts.LoginResponse, error)
	Logout(*network.Client, *base.Empty) (*base.Empty, error)
	GetPlayerData(*network.Client, *base.Empty) (*player.PlayerDataResponse, error)
	SetDecks(*network.Client, *cards.Decks) (*cards.DecksChanges, error)
	Move(*network.Client, *game.Move) (*game.MoveResult, error)
	LeaveMatch(*network.Client, *base.Empty) (*base.Empty, error)
	RequestMatchmaking(*network.Client, *game.MatchmakingRequest) (*base.Empty, error)
	CancelMatchmaking(*network.Client, *base.Empty) (*base.Empty, error)
	PlayerReady(*network.Client, *base.Empty) (*base.Empty, error)
	StartMission(*network.Client, *game.MissionRequest) (*base.Empty, error)
	GetFriendsData(*network.Client, *base.Empty) (*friends.FriendsData, error)
	FriendRequest(*network.Client, *base.ObjectID) (*accounts.UserInfo, error)
	AcceptFriendRequest(*network.Client, *base.ObjectID) (*base.Empty, error)
	DeclineFriendRequest(*network.Client, *base.ObjectID) (*base.Empty, error)
	CancelFriendRequest(*network.Client, *base.ObjectID) (*base.Empty, error)
	DeleteFriend(*network.Client, *base.ObjectID) (*base.Empty, error)
	FriendlyMatch(*network.Client, *friends.FriendlyMatchRequest) (*base.Empty, error)
	AcceptFriendlyMatch(*network.Client, *friends.FriendlyMatchAccept) (*base.Empty, error)
	DeclineFriendlyMatch(*network.Client, *friends.FriendlyMatchDecline) (*base.Empty, error)
	CancelFriendlyMatch(*network.Client, *friends.FriendlyMatchCancel) (*base.Empty, error)
	FindPlayers(*network.Client, *friends.FindRequest) (*friends.FindResponse, error)
	EnterArenaTour(*network.Client, *arena.EnterRequest) (*arena.EnterResponse, error)
	SetArenaAttackDeck(*network.Client, *arena.SetAttackDeckRequest) (*base.Empty, error)
	StartArenaBattle(*network.Client, *base.Empty) (*base.Empty, error)
	GetArenaLeaderboard(*network.Client, *base.Empty) (*arena.ArenaLeaderboardResponse, error)
	FindArenaOpponent(*network.Client, *base.Empty) (*arena.ArenaPlayerData, error)
	CreateDeck(*network.Client, *cards.Deck) (*cards.Deck, error)
	TakeArenaTourRewards(*network.Client, *base.Empty) (*arena.ArenaTourRewardsResponse, error)
	ArenaRevive(*network.Client, *base.Empty) (*resources.ResourceAdjustments, error)
	GetArenaBattleLogs(*network.Client, *base.Empty) (*arena.ArenaBattleLogs, error)
	ClaimTrophyRoadReward(*network.Client, *arena.ClaimTrophyRoadRewardRequest) (*arena.ClaimTrophyRoadRewardResponse, error)
	GetArenaTourRewards(*network.Client, *base.Empty) (*resources.ResourceAdjustments, error)
	GetArenaConfigs(*network.Client, *base.Empty) (*arena.ArenaConfig, error)
	GetInGameStoreData(*network.Client, *base.Empty) (*store.StoreData, error)
	CreateOrder(*network.Client, *store.OrderRequest) (*store.OrderResponse, error)
	SubmitPromoCode(*network.Client, *store.PromoCodeSubmitRequest) (*store.PromoCodeSubmitResponse, error)
	SendPaymentReceipt(*network.Client, *store.Receipt) (*base.Empty, error)
	OpenPack(*network.Client, *base.ObjectID) (*store.OpenPackResponse, error)
	GetUnopenedPacks(*network.Client, *base.Empty) (*store.Orders, error)
	GetLoCGRate(*network.Client, *base.Empty) (*store.LoCGConvertRate, error)
	Withdraw(*network.Client, *resources.WithdrawRequest) (*resources.WithdrawResponse, error)
	SetAccountInfo(*network.Client, *accounts.SetInfoRequest) (*base.Empty, error)
	CompleteTutorialStep(*network.Client, *base.Empty) (*base.Empty, error)
	CompleteSoftTutorialStep(*network.Client, *tutorial.CompleteTutorialStepRequest) (*base.Empty, error)
	ForceSetTutorialStep(*network.Client, *tutorial.CompleteTutorialStepRequest) (*base.Empty, error)
	DeleteSoftTutorialStep(*network.Client, *tutorial.CompleteTutorialStepRequest) (*base.Empty, error)
	GetDailyRewards(*network.Client, *base.Empty) (*player.DailyRewardsResponse, error)
	TakeDailyReward(*network.Client, *base.Empty) (*resources.ResourceAdjustments, error)
	SendLoginEmail(*network.Client, *accounts.LoginEmailRequest) (*accounts.LoginEmailResponse, error)
	VerifyLoginEmail(*network.Client, *accounts.VerifyLoginEmailRequest) (*accounts.LoginResponse, error)
	SocialLogin(*network.Client, *accounts.VerifySocialLoginRequest) (*accounts.LoginResponse, error)
	GetUserBalances(*network.Client, *accounts.AccountBalanceRequest) (*accounts.AccountBalanceResponse, error)
	SetActiveWallet(*network.Client, *accounts.SetActiveWalletRequest) (*base.Empty, error)
	QuickMatch(*network.Client, *matches.QuickMatchRequest) (*base.Empty, error)
	GetOpponentsQuickMatch(*network.Client, *base.Empty) (*matches.QuickMatchList, error)
	SelectQuickMatch(*network.Client, *matches.QuickMatchData) (*base.Empty, error)
	AcceptQuickMatch(*network.Client, *matches.QuickMatchAccept) (*base.Empty, error)
	DeclineQuickMatch(*network.Client, *matches.QuickMatchDecline) (*base.Empty, error)
	CancelQuickMatch(*network.Client, *matches.QuickMatchCancel) (*base.Empty, error)
	CreateUpgradeOrder(*network.Client, *store.UpgradeRequest) (*store.OrderResponse, error)
}

func NewServerHandler(router ServerRouter) *ServerHandler {
	h := new(ServerHandler)
	h.methodByID = map[uint16]func(*network.Client, any){}
	h.methodByIDWithReply = map[uint16]func(*network.Client, any) (protobuf.Message, error){
		10000: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetConfigs(client, args.(*base.Empty))
		},
		10001: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.AuthToken(client, args.(*accounts.RefreshTokenRequest))
		},
		10002: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.Web3ChallengeRequest(client, args.(*accounts.Web3AuthRequest))
		},
		10003: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.Web3Authorize(client, args.(*accounts.Web3Signature))
		},
		10004: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.FakeWeb3Authorize(client, args.(*accounts.Web3AuthRequest))
		},
		10005: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.Logout(client, args.(*base.Empty))
		},
		10006: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetPlayerData(client, args.(*base.Empty))
		},
		10007: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SetDecks(client, args.(*cards.Decks))
		},
		10008: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.Move(client, args.(*game.Move))
		},
		10009: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.LeaveMatch(client, args.(*base.Empty))
		},
		10010: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.RequestMatchmaking(client, args.(*game.MatchmakingRequest))
		},
		10011: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CancelMatchmaking(client, args.(*base.Empty))
		},
		10012: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.PlayerReady(client, args.(*base.Empty))
		},
		10013: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.StartMission(client, args.(*game.MissionRequest))
		},
		10014: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetFriendsData(client, args.(*base.Empty))
		},
		10015: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.FriendRequest(client, args.(*base.ObjectID))
		},
		10016: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.AcceptFriendRequest(client, args.(*base.ObjectID))
		},
		10017: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.DeclineFriendRequest(client, args.(*base.ObjectID))
		},
		10018: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CancelFriendRequest(client, args.(*base.ObjectID))
		},
		10019: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.DeleteFriend(client, args.(*base.ObjectID))
		},
		10020: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.FriendlyMatch(client, args.(*friends.FriendlyMatchRequest))
		},
		10021: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.AcceptFriendlyMatch(client, args.(*friends.FriendlyMatchAccept))
		},
		10022: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.DeclineFriendlyMatch(client, args.(*friends.FriendlyMatchDecline))
		},
		10023: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CancelFriendlyMatch(client, args.(*friends.FriendlyMatchCancel))
		},
		10024: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.FindPlayers(client, args.(*friends.FindRequest))
		},
		10025: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.EnterArenaTour(client, args.(*arena.EnterRequest))
		},
		10026: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SetArenaAttackDeck(client, args.(*arena.SetAttackDeckRequest))
		},
		10027: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.StartArenaBattle(client, args.(*base.Empty))
		},
		10028: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetArenaLeaderboard(client, args.(*base.Empty))
		},
		10029: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.FindArenaOpponent(client, args.(*base.Empty))
		},
		10030: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CreateDeck(client, args.(*cards.Deck))
		},
		10031: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.TakeArenaTourRewards(client, args.(*base.Empty))
		},
		10032: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.ArenaRevive(client, args.(*base.Empty))
		},
		10033: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetArenaBattleLogs(client, args.(*base.Empty))
		},
		10034: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.ClaimTrophyRoadReward(client, args.(*arena.ClaimTrophyRoadRewardRequest))
		},
		10035: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetArenaTourRewards(client, args.(*base.Empty))
		},
		10036: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetArenaConfigs(client, args.(*base.Empty))
		},
		10037: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetInGameStoreData(client, args.(*base.Empty))
		},
		10038: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CreateOrder(client, args.(*store.OrderRequest))
		},
		10039: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SubmitPromoCode(client, args.(*store.PromoCodeSubmitRequest))
		},
		10040: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SendPaymentReceipt(client, args.(*store.Receipt))
		},
		10041: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.OpenPack(client, args.(*base.ObjectID))
		},
		10042: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetUnopenedPacks(client, args.(*base.Empty))
		},
		10043: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetLoCGRate(client, args.(*base.Empty))
		},
		10044: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.Withdraw(client, args.(*resources.WithdrawRequest))
		},
		10045: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SetAccountInfo(client, args.(*accounts.SetInfoRequest))
		},
		10046: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CompleteTutorialStep(client, args.(*base.Empty))
		},
		10047: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CompleteSoftTutorialStep(client, args.(*tutorial.CompleteTutorialStepRequest))
		},
		10048: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.ForceSetTutorialStep(client, args.(*tutorial.CompleteTutorialStepRequest))
		},
		10049: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.DeleteSoftTutorialStep(client, args.(*tutorial.CompleteTutorialStepRequest))
		},
		10050: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetDailyRewards(client, args.(*base.Empty))
		},
		10051: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.TakeDailyReward(client, args.(*base.Empty))
		},
		10052: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SendLoginEmail(client, args.(*accounts.LoginEmailRequest))
		},
		10053: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.VerifyLoginEmail(client, args.(*accounts.VerifyLoginEmailRequest))
		},
		10054: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SocialLogin(client, args.(*accounts.VerifySocialLoginRequest))
		},
		10055: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetUserBalances(client, args.(*accounts.AccountBalanceRequest))
		},
		10056: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SetActiveWallet(client, args.(*accounts.SetActiveWalletRequest))
		},
		10057: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.QuickMatch(client, args.(*matches.QuickMatchRequest))
		},
		10058: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.GetOpponentsQuickMatch(client, args.(*base.Empty))
		},
		10059: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.SelectQuickMatch(client, args.(*matches.QuickMatchData))
		},
		10060: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.AcceptQuickMatch(client, args.(*matches.QuickMatchAccept))
		},
		10061: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.DeclineQuickMatch(client, args.(*matches.QuickMatchDecline))
		},
		10062: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CancelQuickMatch(client, args.(*matches.QuickMatchCancel))
		},
		10063: func(client *network.Client, args interface{}) (protobuf.Message, error) {
			return router.CreateUpgradeOrder(client, args.(*store.UpgradeRequest))
		},
	}
	h.argTypeByMethodID = map[uint16]reflect.Type{
		10000: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10001: reflect.TypeOf((*accounts.RefreshTokenRequest)(nil)).Elem(),
		10002: reflect.TypeOf((*accounts.Web3AuthRequest)(nil)).Elem(),
		10003: reflect.TypeOf((*accounts.Web3Signature)(nil)).Elem(),
		10004: reflect.TypeOf((*accounts.Web3AuthRequest)(nil)).Elem(),
		10005: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10006: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10007: reflect.TypeOf((*cards.Decks)(nil)).Elem(),
		10008: reflect.TypeOf((*game.Move)(nil)).Elem(),
		10009: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10010: reflect.TypeOf((*game.MatchmakingRequest)(nil)).Elem(),
		10011: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10012: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10013: reflect.TypeOf((*game.MissionRequest)(nil)).Elem(),
		10014: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10015: reflect.TypeOf((*base.ObjectID)(nil)).Elem(),
		10016: reflect.TypeOf((*base.ObjectID)(nil)).Elem(),
		10017: reflect.TypeOf((*base.ObjectID)(nil)).Elem(),
		10018: reflect.TypeOf((*base.ObjectID)(nil)).Elem(),
		10019: reflect.TypeOf((*base.ObjectID)(nil)).Elem(),
		10020: reflect.TypeOf((*friends.FriendlyMatchRequest)(nil)).Elem(),
		10021: reflect.TypeOf((*friends.FriendlyMatchAccept)(nil)).Elem(),
		10022: reflect.TypeOf((*friends.FriendlyMatchDecline)(nil)).Elem(),
		10023: reflect.TypeOf((*friends.FriendlyMatchCancel)(nil)).Elem(),
		10024: reflect.TypeOf((*friends.FindRequest)(nil)).Elem(),
		10025: reflect.TypeOf((*arena.EnterRequest)(nil)).Elem(),
		10026: reflect.TypeOf((*arena.SetAttackDeckRequest)(nil)).Elem(),
		10027: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10028: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10029: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10030: reflect.TypeOf((*cards.Deck)(nil)).Elem(),
		10031: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10032: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10033: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10034: reflect.TypeOf((*arena.ClaimTrophyRoadRewardRequest)(nil)).Elem(),
		10035: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10036: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10037: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10038: reflect.TypeOf((*store.OrderRequest)(nil)).Elem(),
		10039: reflect.TypeOf((*store.PromoCodeSubmitRequest)(nil)).Elem(),
		10040: reflect.TypeOf((*store.Receipt)(nil)).Elem(),
		10041: reflect.TypeOf((*base.ObjectID)(nil)).Elem(),
		10042: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10043: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10044: reflect.TypeOf((*resources.WithdrawRequest)(nil)).Elem(),
		10045: reflect.TypeOf((*accounts.SetInfoRequest)(nil)).Elem(),
		10046: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10047: reflect.TypeOf((*tutorial.CompleteTutorialStepRequest)(nil)).Elem(),
		10048: reflect.TypeOf((*tutorial.CompleteTutorialStepRequest)(nil)).Elem(),
		10049: reflect.TypeOf((*tutorial.CompleteTutorialStepRequest)(nil)).Elem(),
		10050: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10051: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10052: reflect.TypeOf((*accounts.LoginEmailRequest)(nil)).Elem(),
		10053: reflect.TypeOf((*accounts.VerifyLoginEmailRequest)(nil)).Elem(),
		10054: reflect.TypeOf((*accounts.VerifySocialLoginRequest)(nil)).Elem(),
		10055: reflect.TypeOf((*accounts.AccountBalanceRequest)(nil)).Elem(),
		10056: reflect.TypeOf((*accounts.SetActiveWalletRequest)(nil)).Elem(),
		10057: reflect.TypeOf((*matches.QuickMatchRequest)(nil)).Elem(),
		10058: reflect.TypeOf((*base.Empty)(nil)).Elem(),
		10059: reflect.TypeOf((*matches.QuickMatchData)(nil)).Elem(),
		10060: reflect.TypeOf((*matches.QuickMatchAccept)(nil)).Elem(),
		10061: reflect.TypeOf((*matches.QuickMatchDecline)(nil)).Elem(),
		10062: reflect.TypeOf((*matches.QuickMatchCancel)(nil)).Elem(),
		10063: reflect.TypeOf((*store.UpgradeRequest)(nil)).Elem(),
	}
	h.methodNameByID = map[uint16]string{
		10000: "GetConfigs",
		10001: "AuthToken",
		10002: "Web3ChallengeRequest",
		10003: "Web3Authorize",
		10004: "FakeWeb3Authorize",
		10005: "Logout",
		10006: "GetPlayerData",
		10007: "SetDecks",
		10008: "Move",
		10009: "LeaveMatch",
		10010: "RequestMatchmaking",
		10011: "CancelMatchmaking",
		10012: "PlayerReady",
		10013: "StartMission",
		10014: "GetFriendsData",
		10015: "FriendRequest",
		10016: "AcceptFriendRequest",
		10017: "DeclineFriendRequest",
		10018: "CancelFriendRequest",
		10019: "DeleteFriend",
		10020: "FriendlyMatch",
		10021: "AcceptFriendlyMatch",
		10022: "DeclineFriendlyMatch",
		10023: "CancelFriendlyMatch",
		10024: "FindPlayers",
		10025: "EnterArenaTour",
		10026: "SetArenaAttackDeck",
		10027: "StartArenaBattle",
		10028: "GetArenaLeaderboard",
		10029: "FindArenaOpponent",
		10030: "CreateDeck",
		10031: "TakeArenaTourRewards",
		10032: "ArenaRevive",
		10033: "GetArenaBattleLogs",
		10034: "ClaimTrophyRoadReward",
		10035: "GetArenaTourRewards",
		10036: "GetArenaConfigs",
		10037: "GetInGameStoreData",
		10038: "CreateOrder",
		10039: "SubmitPromoCode",
		10040: "SendPaymentReceipt",
		10041: "OpenPack",
		10042: "GetUnopenedPacks",
		10043: "GetLoCGRate",
		10044: "Withdraw",
		10045: "SetAccountInfo",
		10046: "CompleteTutorialStep",
		10047: "CompleteSoftTutorialStep",
		10048: "ForceSetTutorialStep",
		10049: "DeleteSoftTutorialStep",
		10050: "GetDailyRewards",
		10051: "TakeDailyReward",
		10052: "SendLoginEmail",
		10053: "VerifyLoginEmail",
		10054: "SocialLogin",
		10055: "GetUserBalances",
		10056: "SetActiveWallet",
		10057: "QuickMatch",
		10058: "GetOpponentsQuickMatch",
		10059: "SelectQuickMatch",
		10060: "AcceptQuickMatch",
		10061: "DeclineQuickMatch",
		10062: "CancelQuickMatch",
		10063: "CreateUpgradeOrder",
	}
	h.cachedMethods = map[uint16]*network.Packet{
		10000: &network.Packet{},
	}
	return h
}

func (h *ServerHandler) GetArgTypeByMethodID(methodID uint16) reflect.Type {
	return h.argTypeByMethodID[methodID]
}

func (h *ServerHandler) GetMethodNameByID(methodID uint16) string {
	return h.methodNameByID[methodID]
}

func (h *ServerHandler) Validate(methodID uint16) bool {
	return methodID >= 10000 && methodID <= 10063
}

func (h *ServerHandler) ClearCache() {
	for _, packet := range h.cachedMethods {
		packet.Payload = nil
	}
}

func (h *ServerHandler) Serve(client *network.Client, packet *network.Packet, arg any) {
	defer func() {
		if err := recover(); err != nil {
			const size = 64 << 10
			buf := make([]byte, size)
			buf = buf[:runtime.Stack(buf, false)]
			log.Errorf("Panic at %v: %v\n%s", client.Stream.RemoteAddr(), err, buf)
			packet.Payload = nil
			packet.Error = &network.Error{ErrorCode: errors.ErrorsByCode[errors.ErrUnexpectedError], Description: errors.ErrUnexpectedError.Error()}
			err = client.Stream.WritePacket(packet)
			if err != nil {
				log.Error("Failed to send error to client:", err)
				client.Stream.Close()
			}
		}
	}()

	if method, ok := h.methodByID[packet.MethodID]; ok {
		method(client, arg)
	} else if method, ok := h.methodByIDWithReply[packet.MethodID]; ok {
		var (
			reply  protobuf.Message
			cached bool
		)
		if cachedMethod, ok := h.cachedMethods[packet.MethodID]; !ok {
			reply = h.callMethod(client, packet, arg, method)
		} else {
			if len(cachedMethod.Payload) > 0 {
				packet.Payload = cachedMethod.Payload
				packet.Error = cachedMethod.Error
				cached = true
			} else {
				reply = h.callMethod(client, packet, arg, method)
				cachedMethod.Payload = packet.Payload
				cachedMethod.Error = packet.Error
			}
		}

		err := client.Stream.WritePacket(packet)

		if network.Verbose && err == nil {
			if cached {
				log.Debugf("<-- %s (CACHED) (%v)", h.methodNameByID[packet.MethodID], client.Stream.Conn.RemoteAddr())
			} else {
				log.Debugf("<-- %s (%s) (%v)", h.methodNameByID[packet.MethodID], reply, client.Stream.Conn.RemoteAddr())
			}
		}

		if err != nil {
			log.Error("Failed to send result:", err)
		} else {
			for {
				fn, ok := client.DeferredCalls.Dequeue();
				if !ok {
					break
				}
				fn()
			}
		}
	} else {
		log.Errorf("Method call failed: Method with identifier %d was not found.", packet.MethodID)
	}
}

func (h *ServerHandler) callMethod(client *network.Client, packet *network.Packet, arg any, method func(*network.Client, any) (protobuf.Message, error)) protobuf.Message {
	reply, err := method(client, arg)
	if err == nil {
		packet.Payload, err = protobuf.Marshal(reply)
	} else {
		packet.Error = &network.Error{ErrorCode: errors.ErrorsByCode[err], Description: err.Error()}
		log.Errorf("Error while calling method %s (%s): %v", h.methodNameByID[packet.MethodID], filterProtoMessage(arg.(protobuf.Message)), err)
	}
	return reply
}

func filterProtoMessage(msg protobuf.Message) protobuf.Message {
	data := msg
	isCloned := false
	msg.ProtoReflect().Range(func(fd protoreflect.FieldDescriptor, value protoreflect.Value) bool {
		opts := fd.Options().(*descriptorpb.FieldOptions)
		if protobuf.HasExtension(opts, options.E_HideInLog) {
			if !isCloned {
				data = protobuf.Clone(msg)
				isCloned = true
			}

			data.ProtoReflect().Set(fd, protoreflect.ValueOfString("[REDACTED]"))
		}
		return true
	})
	return data
}

type ClientHandler struct {
	methodNameByID map[uint16]string
}

func NewClientHandler() *ClientHandler {
	h := new(ClientHandler)
	h.methodNameByID = map[uint16]string{
		20000: "OnMatchmakingComplete",
		20001: "OnBeginMatch",
		20002: "OnOpponentMove",
		20003: "OnEndOpponentTurn",
		20004: "OnEndMatch",
		20005: "OnOpponentLeft",
		20006: "OnEndTurn",
		20007: "OnFriendRequestReceived",
		20008: "OnFriendRequestAccepted",
		20009: "OnFriendRequestDeclined",
		20010: "OnFriendRequestCanceled",
		20011: "OnFriendDeleted",
		20012: "OnFriendlyMatchReceived",
		20013: "OnFriendlyMatchDeclined",
		20014: "OnFriendlyMatchCanceled",
		20015: "OnRatingChanged",
		20016: "OnArenaTourKicked",
		20017: "OnCoinsPurchaseCompleted",
		20018: "OnMintOfPackCompleted",
		20019: "OnDisconnect",
		20020: "OnFriendStatusChanged",
		20021: "OnMaintenanceInfoChanged",
		20022: "OnQuickMatchReceived",
		20023: "OnQuickMatchDeclined",
		20024: "OnQuickMatchCanceled",
		20025: "OnPlayerDataChanged",
		20026: "OnCardUpgradeCompleted",
		20027: "OnTokenPurchaseCompleted",
	}
	return h
}

func (h *ClientHandler) OnMatchmakingComplete(client *network.Client, arg *game.MatchmakingCompleteMessage, error *network.Error) {
	h.invoke(client, 20000, arg, error)
}

func (h *ClientHandler) OnBeginMatch(client *network.Client, arg *game.BeginMatch, error *network.Error) {
	h.invoke(client, 20001, arg, error)
}

func (h *ClientHandler) OnOpponentMove(client *network.Client, arg *game.MoveResult, error *network.Error) {
	h.invoke(client, 20002, arg, error)
}

func (h *ClientHandler) OnEndOpponentTurn(client *network.Client, arg *game.EndOpponentTurn, error *network.Error) {
	h.invoke(client, 20003, arg, error)
}

func (h *ClientHandler) OnEndMatch(client *network.Client, arg *game.MatchResult, error *network.Error) {
	h.invoke(client, 20004, arg, error)
}

func (h *ClientHandler) OnOpponentLeft(client *network.Client, arg *game.MatchResult, error *network.Error) {
	h.invoke(client, 20005, arg, error)
}

func (h *ClientHandler) OnEndTurn(client *network.Client, arg *game.EndTurn, error *network.Error) {
	h.invoke(client, 20006, arg, error)
}

func (h *ClientHandler) OnFriendRequestReceived(client *network.Client, arg *accounts.UserInfo, error *network.Error) {
	h.invoke(client, 20007, arg, error)
}

func (h *ClientHandler) OnFriendRequestAccepted(client *network.Client, arg *base.ObjectID, error *network.Error) {
	h.invoke(client, 20008, arg, error)
}

func (h *ClientHandler) OnFriendRequestDeclined(client *network.Client, arg *base.ObjectID, error *network.Error) {
	h.invoke(client, 20009, arg, error)
}

func (h *ClientHandler) OnFriendRequestCanceled(client *network.Client, arg *base.ObjectID, error *network.Error) {
	h.invoke(client, 20010, arg, error)
}

func (h *ClientHandler) OnFriendDeleted(client *network.Client, arg *base.ObjectID, error *network.Error) {
	h.invoke(client, 20011, arg, error)
}

func (h *ClientHandler) OnFriendlyMatchReceived(client *network.Client, arg *friends.FriendlyMatchRequest, error *network.Error) {
	h.invoke(client, 20012, arg, error)
}

func (h *ClientHandler) OnFriendlyMatchDeclined(client *network.Client, arg *friends.FriendlyMatchDecline, error *network.Error) {
	h.invoke(client, 20013, arg, error)
}

func (h *ClientHandler) OnFriendlyMatchCanceled(client *network.Client, arg *base.Empty, error *network.Error) {
	h.invoke(client, 20014, arg, error)
}

func (h *ClientHandler) OnRatingChanged(client *network.Client, arg *base.Int, error *network.Error) {
	h.invoke(client, 20015, arg, error)
}

func (h *ClientHandler) OnArenaTourKicked(client *network.Client, arg *arena.ArenaTourRewardsResponse, error *network.Error) {
	h.invoke(client, 20016, arg, error)
}

func (h *ClientHandler) OnCoinsPurchaseCompleted(client *network.Client, arg *store.CoinsPurchaseResult, error *network.Error) {
	h.invoke(client, 20017, arg, error)
}

func (h *ClientHandler) OnMintOfPackCompleted(client *network.Client, arg *store.PackPurchaseResult, error *network.Error) {
	h.invoke(client, 20018, arg, error)
}

func (h *ClientHandler) OnDisconnect(client *network.Client, arg *accounts.Disconnect, error *network.Error) {
	h.invoke(client, 20019, arg, error)
}

func (h *ClientHandler) OnFriendStatusChanged(client *network.Client, arg *friends.FriendStatusData, error *network.Error) {
	h.invoke(client, 20020, arg, error)
}

func (h *ClientHandler) OnMaintenanceInfoChanged(client *network.Client, arg *maintenance.MaintenanceData, error *network.Error) {
	h.invoke(client, 20021, arg, error)
}

func (h *ClientHandler) OnQuickMatchReceived(client *network.Client, arg *matches.QuickMatchRequest, error *network.Error) {
	h.invoke(client, 20022, arg, error)
}

func (h *ClientHandler) OnQuickMatchDeclined(client *network.Client, arg *matches.QuickMatchDecline, error *network.Error) {
	h.invoke(client, 20023, arg, error)
}

func (h *ClientHandler) OnQuickMatchCanceled(client *network.Client, arg *base.Empty, error *network.Error) {
	h.invoke(client, 20024, arg, error)
}

func (h *ClientHandler) OnPlayerDataChanged(client *network.Client, arg *player.PlayerData, error *network.Error) {
	h.invoke(client, 20025, arg, error)
}

func (h *ClientHandler) OnCardUpgradeCompleted(client *network.Client, arg *store.CardUpgradeResult, error *network.Error) {
	h.invoke(client, 20026, arg, error)
}

func (h *ClientHandler) OnTokenPurchaseCompleted(client *network.Client, arg *store.TokenPurchaseResult, error *network.Error) {
	h.invoke(client, 20027, arg, error)
}

func (h *ClientHandler) invoke(client *network.Client, methodID uint16, arg protobuf.Message, error *network.Error) {
	payload, err := protobuf.Marshal(arg)

	if err == nil {
		packet := &network.Packet{
			MethodID: methodID,
			Payload:  payload,
			Error:    error,
		}

		if network.Verbose {
			log.Debugf("<-- %s (%s) (%v)", h.methodNameByID[packet.MethodID], filterProtoMessage(arg), client.Stream.Conn.RemoteAddr())
		}

		err = client.Stream.WritePacket(packet)

		if err == nil {
			for {
				fn, ok := client.DeferredCalls.Dequeue();
				if !ok {
					break
				}
				fn()
			}
		}
	}
	if err != nil {
		log.Error("Remote method call error:", err)
	}
}
